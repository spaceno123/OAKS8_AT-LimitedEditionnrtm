;	Program	DMPSIZ.A30
;	Date	2004/1/3 .. 2004/1/3
;	Copyright (c) 2004 by AKIYA.
;	All rights reserved.

	;////////////////////////
	;/// dump memory size ///
	;////////////////////////

	.glb	dbg_putc, dbg_scanf, dbg_chk_rxd_buf, dbg_puthn

	.section	DBG_CODE, CODE

	.glb	dbg_dmp_siz
dbg_dmp_siz:
	mov.b	#"-",r0l
	jsr	dbg_putc
	add.w	#-(2+2+2),sp
	mov.w	#dmp_siz_scn,a0
	jsr	dbg_scanf
	jc	dbg_dmp_siz_2
	mov.w	4[sp],r0		; sp=start,sp+2=size,sp+4=wide
	jz	dbg_dmp_siz_2		; wide==0 !
	pop.w	r0			; r0=start
	pop.w	a0			; a0=size
	or.w	a0,a0
	jz	dbg_dmp_siz_3
	add.w	r0,a0
	dec.w	a0			; a0=end
	;* r0=start,a0=end,sp=wide *
dbg_dmp_siz_0:
	jsr	dbg_dmp_siz_hex
	jc	dbg_dmp_siz_1
	jsr	dbg_chk_rxd_buf
	jnc	dbg_dmp_siz_1		; exit
	push.w	a0
	push.w	r0
	mov.b	#0dh,r0l
	jsr	dbg_putc
	mov.b	#0ah,r0l
	jsr	dbg_putc
	pop.w	r0
	mov.w	2[sp],a0
	add.w	a0,r0
	pop.w	a0
	jmp	dbg_dmp_siz_0
dbg_dmp_siz_1:
	add.w	#2,sp
	fclr	c
	rts
dbg_dmp_siz_2:
	add.w	#2+2,sp
dbg_dmp_siz_3:
	add.w	#2,sp
	fset	c
	rts

;- dump memory size hex -
; entry	 r0=start address
;	 a0=end address
;	 @sp+3=wide
; return c=0:not end,1:end
dbg_dmp_siz_hex:
	push.w	r0
	push.w	a0
	mov.w	r0,a0
	mov.b	#4,r0h
	push.w	a0
	jsr	dbg_puthn
	mov.b	#" ",r0l
	jsr	dbg_putc
	pop.w	a0
	xor.w	r0,r0
	;* r0=count,a0=address,sp=end,sp+7=wide *
dbg_dmp_siz_hex_0:
	push.w	r0		;!
	and.b	#7,r0l
	jnz	dbg_dmp_siz_hex_1
	push.w	a0
	mov.b	#" ",r0l
	jsr	dbg_putc
	pop.w	a0
dbg_dmp_siz_hex_1:
	mov.b	[a0],r0l
	push.w	a0		;!!
	mov.b	r0l,a0
	mov.b	#2,r0h
	jsr	dbg_puthn
	pop.w	a0		;!!
	mov.w	2[sp],r0
	cmp.w	a0,r0
	jeq	dbg_dmp_siz_hex_4
	inc.w	a0
	pop.w	r0		;!
	push.w	a0		;!
	add.w	#1,r0
	mov.w	9[sp],a0
	cmp.w	a0,r0
	jeq	dbg_dmp_siz_hex_5
	push.w	r0		;!!
	and.b	#31,r0l
	jne	dbg_dmp_siz_hex_3
	mov.b	#0dh,r0l
	jsr	dbg_putc
	mov.b	#0ah,r0l
	jsr	dbg_putc
	mov.b	#4+1,r0h
dbg_dmp_siz_hex_2:
	push.b	r0h
	mov.b	#" ",r0l
	jsr	dbg_putc
	pop.b	r0h
	dec.b	r0h
	jne	dbg_dmp_siz_hex_2
dbg_dmp_siz_hex_3:
	pop.w	r0		;!!
	pop.w	a0		;!
	jmp	dbg_dmp_siz_hex_0
	;* end address *
dbg_dmp_siz_hex_4:
	add.w	#2,sp
	pop.w	a0
	pop.w	r0
	fset	c
	rts
	;* continue *
dbg_dmp_siz_hex_5:
	add.w	#2,sp
	pop.w	a0
	pop.w	r0
	fclr	c
	rts

	.section	DBG_MSG, ROMDATA

dmp_siz_scn:
	.byte	"%x,%x,%x\\r",0

	.end
